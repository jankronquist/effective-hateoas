
REST Intro:
-3-tier system
-what is a resource (uniform interface)
-what is a representation
-what is a link
-REST definition (-constraints, -pros/cons)
-Confusion of 'what is REST'
-Richardson maturity model


Construction:
-Classic JAX-RS style is broken
-URL structure should have a meaning reflected in code
  -sub resources
  -path as method name
  -single root resource
-Constraints on methods
-Link building statically ( new Link( root.product(17).purchase() )
-Link relation


Test:
-Simple to browse
-Javascript devs no need to know Java
-No need to maintain API docs
-HOW?
-Conventions for generic client
  -Provide generic client
     1. html representation (browser is generic client - cons: only GET/POST etc)
     2. javascript client
  -Pros/cons HTML representation: +straight forward, -incorrect verbs for PUT/DELETE, 
                          -different API use from normal client,
                          -not clear separation between normal and generic
  -Pros/Cons explicit generic client: +clear separation between normal and generic client
                                      -framework support, +operates the same way as the
                                      real client



Consumption:
-Consumption meaning: external client that cusomes the API!
-Discovery via state machine
-Knows parameter + media types + rels from documentation
-Classic: Boolean/enums replication of domain logic
-Links: control behaviour in client (e.g. what buttons to show)


Conclusion:

Practical 
-pros: 
       less repeated business logic in client => clients can handle change in logic
       test
       auto documentation
       
-cons: 
       Some overhead in code (missing framework)
       runtime overhead (evalutaion path + constraints)
       

----------------------


!SLIDE bullets
# Just a transport mechanism #

* Rule 1 - Focus on what + why

.notes Uncle Bob - The web is just a transport mechanism. Focus on your application domain and business logic (why + what), not the how
x
!SLIDE bullets
# URL structure #

* Rule 2 - Structure your code around the URLs


!SLIDE bullets
# Why links #

* HATEOAS is all about caring and guiding your clients

.notes I had a discussion with a friend who is working as an iPhone developer. It went somthing like this:
Him: "We are using REST for all our backend services! It is soo great!" 
Me: "Cool! Are you adhering to the hypermedia constraint?"
Him: "No, we don't see the point in using links. The server developers just document what URLs we should use. We use booleans and various other state to determine what to do."
Me: "What kind of problems are you having?"
Him: "The main problem we have is that the server guys don't really care what we are trying to accomplish in the UI. They just publish resources that they think is useful and we have to retrieve a bunch of resources to create a meaningful view. And the other day it turned out that this boolean had to be changed into an enum, which of course affected what resources to retrieve."


---------------

ROCA-style
* must-html/must-jslimits/mustnot-jsengine - Having a HTML representation of your resources is useful. The problem is not viewing resources, but interacting with the resources.
- Javascript developers may be confused with the API since the text/html and application/json mediatypes are different
- Since browsers have adopted certain conventions for HTTP status codes their meaning are reduced.

TODO:
* Är det möjligt att använda PUT/DELETE från HTML forms?






